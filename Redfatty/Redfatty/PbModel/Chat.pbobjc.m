// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Chat.pbobjc.h"
 #import "Account.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChatRoot

@implementation ChatRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AccountRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ChatRoot_FileDescriptor

static GPBFileDescriptor *ChatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PWkToken

@implementation PWkToken

@dynamic appAccessToken;
@dynamic domain;
@dynamic appKey;
@dynamic openId;
@dynamic nonce;
@dynamic timestamp;
@dynamic signature;

typedef struct PWkToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *appAccessToken;
  NSString *domain;
  NSString *appKey;
  NSString *nonce;
  NSString *signature;
  int64_t openId;
  int64_t timestamp;
} PWkToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appAccessToken",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_AppAccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PWkToken__storage_, appAccessToken),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_Domain,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PWkToken__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_AppKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PWkToken__storage_, appKey),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_OpenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PWkToken__storage_, openId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_Nonce,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PWkToken__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_Timestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PWkToken__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "signature",
        .dataTypeSpecific.className = NULL,
        .number = PWkToken_FieldNumber_Signature,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PWkToken__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PWkToken class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PWkToken__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\016\000\003\006\000\004\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PConversation

@implementation PConversation

@dynamic conversationId;
@dynamic openId;
@dynamic type;
@dynamic icon;
@dynamic title;
@dynamic tag;
@dynamic memberLimit;
@dynamic superGroup;
@dynamic parentId;
@dynamic nodeType;
@dynamic membersArray, membersArray_Count;

typedef struct PConversation__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t memberLimit;
  int32_t superGroup;
  int32_t nodeType;
  NSString *conversationId;
  NSString *icon;
  NSString *title;
  NSString *parentId;
  GPBInt64Array *membersArray;
  int64_t openId;
  int64_t tag;
} PConversation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "conversationId",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_ConversationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PConversation__storage_, conversationId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_OpenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PConversation__storage_, openId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PConversation__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_Icon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PConversation__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PConversation__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tag",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_Tag,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PConversation__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "memberLimit",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_MemberLimit,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PConversation__storage_, memberLimit),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "superGroup",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_SuperGroup,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PConversation__storage_, superGroup),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "parentId",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_ParentId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PConversation__storage_, parentId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nodeType",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_NodeType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PConversation__storage_, nodeType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.className = NULL,
        .number = PConversation_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PConversation__storage_, membersArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PConversation class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PConversation__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\016\000\002\006\000\007\013\000\010\n\000\t\010\000\n\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PJoinRoom

@implementation PJoinRoom

@dynamic code;
@dynamic oldRoomId;
@dynamic oldRoomName;
@dynamic newRoomId;
@dynamic newRoomName;
@dynamic queueSize;

typedef struct PJoinRoom__storage_ {
  uint32_t _has_storage_[1];
  int32_t queueSize;
  NSString *oldRoomId;
  NSString *oldRoomName;
  NSString *newRoomId;
  NSString *newRoomName;
  int64_t code;
} PJoinRoom__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "oldRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_OldRoomId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, oldRoomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldRoomName",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_OldRoomName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, oldRoomName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newRoomId",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_NewRoomId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, newRoomId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newRoomName",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_NewRoomName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, newRoomName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "queueSize",
        .dataTypeSpecific.className = NULL,
        .number = PJoinRoom_FieldNumber_QueueSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PJoinRoom__storage_, queueSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PJoinRoom class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PJoinRoom__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\t\000\003\013\000\004\t\000\005\013\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PCommunity

@implementation PCommunity

@dynamic ownerUuid;
@dynamic communityId;
@dynamic communityName;
@dynamic communityIcon;
@dynamic uuidsArray, uuidsArray_Count;

typedef struct PCommunity__storage_ {
  uint32_t _has_storage_[1];
  NSString *ownerUuid;
  NSString *communityId;
  NSString *communityName;
  NSString *communityIcon;
  NSMutableArray *uuidsArray;
} PCommunity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerUuid",
        .dataTypeSpecific.className = NULL,
        .number = PCommunity_FieldNumber_OwnerUuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PCommunity__storage_, ownerUuid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "communityId",
        .dataTypeSpecific.className = NULL,
        .number = PCommunity_FieldNumber_CommunityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PCommunity__storage_, communityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "communityName",
        .dataTypeSpecific.className = NULL,
        .number = PCommunity_FieldNumber_CommunityName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PCommunity__storage_, communityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "communityIcon",
        .dataTypeSpecific.className = NULL,
        .number = PCommunity_FieldNumber_CommunityIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PCommunity__storage_, communityIcon),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuidsArray",
        .dataTypeSpecific.className = NULL,
        .number = PCommunity_FieldNumber_UuidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PCommunity__storage_, uuidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PCommunity class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PCommunity__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\002\013\000\003\r\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMemberList

@implementation PMemberList

@dynamic size;
@dynamic listArray, listArray_Count;

typedef struct PMemberList__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  NSMutableArray *listArray;
} PMemberList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PMemberList_FieldNumber_Size,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PMemberList__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PMember),
        .number = PMemberList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PMemberList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMemberList class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMemberList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMember

@implementation PMember

@dynamic hasUser, user;
@dynamic isFriend;
@dynamic isFollow;
@dynamic isManager;
@dynamic gameLevel;

typedef struct PMember__storage_ {
  uint32_t _has_storage_[1];
  int32_t isFriend;
  int32_t isFollow;
  int32_t isManager;
  int32_t gameLevel;
  PUserBase *user;
} PMember__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PUserBase),
        .number = PMember_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PMember__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isFriend",
        .dataTypeSpecific.className = NULL,
        .number = PMember_FieldNumber_IsFriend,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PMember__storage_, isFriend),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isFollow",
        .dataTypeSpecific.className = NULL,
        .number = PMember_FieldNumber_IsFollow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PMember__storage_, isFollow),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "isManager",
        .dataTypeSpecific.className = NULL,
        .number = PMember_FieldNumber_IsManager,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PMember__storage_, isManager),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gameLevel",
        .dataTypeSpecific.className = NULL,
        .number = PMember_FieldNumber_GameLevel,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PMember__storage_, gameLevel),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMember class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMember__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002H\000\003H\000\004I\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PChatIdMessage

@implementation PChatIdMessage

@dynamic uuid;
@dynamic chatId;

typedef struct PChatIdMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *chatId;
} PChatIdMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PChatIdMessage_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PChatIdMessage__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatId",
        .dataTypeSpecific.className = NULL,
        .number = PChatIdMessage_FieldNumber_ChatId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PChatIdMessage__storage_, chatId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PChatIdMessage class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PChatIdMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PChatIdListMessage

@implementation PChatIdListMessage

@dynamic chatIdMapArray, chatIdMapArray_Count;

typedef struct PChatIdListMessage__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *chatIdMapArray;
} PChatIdListMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chatIdMapArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PChatIdMessage),
        .number = PChatIdListMessage_FieldNumber_ChatIdMapArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PChatIdListMessage__storage_, chatIdMapArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PChatIdListMessage class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PChatIdListMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\000chatIdMap\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PQuerySingleMessage

@implementation PQuerySingleMessage

@dynamic errorCode;
@dynamic errorMsg;
@dynamic contentType;
@dynamic data_p;

typedef struct PQuerySingleMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMsg;
  NSString *contentType;
  NSData *data_p;
} PQuerySingleMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = PQuerySingleMessage_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PQuerySingleMessage__storage_, errorCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorMsg",
        .dataTypeSpecific.className = NULL,
        .number = PQuerySingleMessage_FieldNumber_ErrorMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PQuerySingleMessage__storage_, errorMsg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = PQuerySingleMessage_FieldNumber_ContentType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PQuerySingleMessage__storage_, contentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PQuerySingleMessage_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PQuerySingleMessage__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PQuerySingleMessage class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PQuerySingleMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\010\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PQueryMoreMessage

@implementation PQueryMoreMessage

@dynamic errorCode;
@dynamic errorMsg;
@dynamic dataArray, dataArray_Count;

typedef struct PQueryMoreMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorMsg;
  NSMutableArray *dataArray;
} PQueryMoreMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = PQueryMoreMessage_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PQueryMoreMessage__storage_, errorCode),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorMsg",
        .dataTypeSpecific.className = NULL,
        .number = PQueryMoreMessage_FieldNumber_ErrorMsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PQueryMoreMessage__storage_, errorMsg),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PMessageData),
        .number = PQueryMoreMessage_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PQueryMoreMessage__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PQueryMoreMessage class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PQueryMoreMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMessageData

@implementation PMessageData

@dynamic openId;
@dynamic messageId;
@dynamic createdAt;
@dynamic conversationId;
@dynamic contentType;
@dynamic data_p;

typedef struct PMessageData__storage_ {
  uint32_t _has_storage_[1];
  NSString *openId;
  NSString *messageId;
  NSString *createdAt;
  NSString *conversationId;
  NSString *contentType;
  NSData *data_p;
} PMessageData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_OpenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PMessageData__storage_, openId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PMessageData__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PMessageData__storage_, createdAt),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "conversationId",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_ConversationId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PMessageData__storage_, conversationId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_ContentType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PMessageData__storage_, contentType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = PMessageData_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PMessageData__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMessageData class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMessageData__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\002\t\000\003\t\000\004\016\000\005\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PTextMsg

@implementation PTextMsg

@dynamic text;

typedef struct PTextMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
} PTextMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PTextMsg_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PTextMsg__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PTextMsg class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PTextMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PImageMsg

@implementation PImageMsg

@dynamic mediaId;
@dynamic mediaSize;
@dynamic mediaURL;

typedef struct PImageMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaSize;
  NSString *mediaId;
  NSString *mediaURL;
} PImageMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = PImageMsg_FieldNumber_MediaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PImageMsg__storage_, mediaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaSize",
        .dataTypeSpecific.className = NULL,
        .number = PImageMsg_FieldNumber_MediaSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PImageMsg__storage_, mediaSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = PImageMsg_FieldNumber_MediaURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PImageMsg__storage_, mediaURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PImageMsg class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PImageMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\002\t\000\003\006!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAudioMsg

@implementation PAudioMsg

@dynamic mediaId;
@dynamic duration;
@dynamic audioVolumns;
@dynamic mediaURL;

typedef struct PAudioMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t duration;
  int32_t audioVolumns;
  NSString *mediaId;
  NSString *mediaURL;
} PAudioMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = PAudioMsg_FieldNumber_MediaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAudioMsg__storage_, mediaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PAudioMsg_FieldNumber_Duration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAudioMsg__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioVolumns",
        .dataTypeSpecific.className = NULL,
        .number = PAudioMsg_FieldNumber_AudioVolumns,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAudioMsg__storage_, audioVolumns),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = PAudioMsg_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAudioMsg__storage_, mediaURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAudioMsg class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAudioMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\007\000\003\014\000\004\006!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAudioImageMsg

@implementation PAudioImageMsg

@dynamic mediaId;
@dynamic mediaSize;
@dynamic duration;
@dynamic audioVolumns;
@dynamic mediaURL;

typedef struct PAudioImageMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t mediaSize;
  int32_t duration;
  int32_t audioVolumns;
  NSString *mediaId;
  NSString *mediaURL;
} PAudioImageMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = PAudioImageMsg_FieldNumber_MediaId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAudioImageMsg__storage_, mediaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaSize",
        .dataTypeSpecific.className = NULL,
        .number = PAudioImageMsg_FieldNumber_MediaSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAudioImageMsg__storage_, mediaSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = NULL,
        .number = PAudioImageMsg_FieldNumber_Duration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAudioImageMsg__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "audioVolumns",
        .dataTypeSpecific.className = NULL,
        .number = PAudioImageMsg_FieldNumber_AudioVolumns,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAudioImageMsg__storage_, audioVolumns),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = PAudioImageMsg_FieldNumber_MediaURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAudioImageMsg__storage_, mediaURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAudioImageMsg class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAudioImageMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\007\000\002\t\000\004\014\000\005\006!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PFileMsg

@implementation PFileMsg

@dynamic fileName;
@dynamic fileType;
@dynamic mediaId;
@dynamic fileSize;
@dynamic mediaURL;

typedef struct PFileMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t fileSize;
  NSString *fileName;
  NSString *fileType;
  NSString *mediaId;
  NSString *mediaURL;
} PFileMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fileName",
        .dataTypeSpecific.className = NULL,
        .number = PFileMsg_FieldNumber_FileName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PFileMsg__storage_, fileName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileType",
        .dataTypeSpecific.className = NULL,
        .number = PFileMsg_FieldNumber_FileType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PFileMsg__storage_, fileType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaId",
        .dataTypeSpecific.className = NULL,
        .number = PFileMsg_FieldNumber_MediaId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PFileMsg__storage_, mediaId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fileSize",
        .dataTypeSpecific.className = NULL,
        .number = PFileMsg_FieldNumber_FileSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PFileMsg__storage_, fileSize),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = PFileMsg_FieldNumber_MediaURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PFileMsg__storage_, mediaURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PFileMsg class]
                                     rootClass:[ChatRoot class]
                                          file:ChatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PFileMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\010\000\003\007\000\004\010\000\005\006!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

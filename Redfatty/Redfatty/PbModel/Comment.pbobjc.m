// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comment.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Comment.pbobjc.h"
 #import "News.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommentRoot

@implementation CommentRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[NewsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CommentRoot_FileDescriptor

static GPBFileDescriptor *CommentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PComment

@implementation PComment

@dynamic id_p;
@dynamic uuid;
@dynamic nickname;
@dynamic headImgURL;
@dynamic atUuid;
@dynamic atNickname;
@dynamic isShield;
@dynamic vote;
@dynamic children;
@dynamic upvotes;
@dynamic downvotes;
@dynamic createTime;
@dynamic text;
@dynamic hasAudio, audio;

typedef struct PComment__storage_ {
  uint32_t _has_storage_[1];
  int32_t vote;
  int32_t children;
  int32_t upvotes;
  int32_t downvotes;
  NSString *id_p;
  NSString *uuid;
  NSString *nickname;
  NSString *headImgURL;
  NSString *atUuid;
  NSString *atNickname;
  NSString *text;
  PAudio *audio;
  int64_t createTime;
} PComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PComment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PComment__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PComment__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_HeadImgURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PComment__storage_, headImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "atUuid",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_AtUuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PComment__storage_, atUuid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "atNickname",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_AtNickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PComment__storage_, atNickname),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isShield",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_IsShield,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "vote",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Vote,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PComment__storage_, vote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "children",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Children,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PComment__storage_, children),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "upvotes",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Upvotes,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PComment__storage_, upvotes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "downvotes",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Downvotes,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PComment__storage_, downvotes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_CreateTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PComment__storage_, createTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = PComment_FieldNumber_Text,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(PComment__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audio",
        .dataTypeSpecific.className = GPBStringifySymbol(PAudio),
        .number = PComment_FieldNumber_Audio,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(PComment__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PComment class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PComment__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\010!!\000\005\006\000\006\n\000\010\010\000\r\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PCommentLevel

@implementation PCommentLevel

@dynamic level;
@dynamic count;
@dynamic interactions;
@dynamic commentsArray, commentsArray_Count;

typedef struct PCommentLevel__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  int32_t count;
  int32_t interactions;
  NSMutableArray *commentsArray;
} PCommentLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = PCommentLevel_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PCommentLevel__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PCommentLevel_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PCommentLevel__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "interactions",
        .dataTypeSpecific.className = NULL,
        .number = PCommentLevel_FieldNumber_Interactions,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PCommentLevel__storage_, interactions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PComment),
        .number = PCommentLevel_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PCommentLevel__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PCommentLevel class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PCommentLevel__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PCommentList

@implementation PCommentList

@dynamic commentsArray, commentsArray_Count;

typedef struct PCommentList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
} PCommentList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PCommentLevel),
        .number = PCommentList_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PCommentList__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PCommentList class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PCommentList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PVoteUser

@implementation PVoteUser

@dynamic uuid;
@dynamic nickname;
@dynamic headImgURL;

typedef struct PVoteUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *nickname;
  NSString *headImgURL;
} PVoteUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PVoteUser_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PVoteUser__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PVoteUser_FieldNumber_Nickname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PVoteUser__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PVoteUser_FieldNumber_HeadImgURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PVoteUser__storage_, headImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PVoteUser class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PVoteUser__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PVoteUserList

@implementation PVoteUserList

@dynamic userArray, userArray_Count;

typedef struct PVoteUserList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userArray;
} PVoteUserList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PVoteUser),
        .number = PVoteUserList_FieldNumber_UserArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PVoteUserList__storage_, userArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PVoteUserList class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PVoteUserList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PInt32Array

@implementation PInt32Array

@dynamic arrayArray, arrayArray_Count;

typedef struct PInt32Array__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *arrayArray;
} PInt32Array__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "arrayArray",
        .dataTypeSpecific.className = NULL,
        .number = PInt32Array_FieldNumber_ArrayArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PInt32Array__storage_, arrayArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PInt32Array class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PInt32Array__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PCommentBool

@implementation PCommentBool

@dynamic isEnable;

typedef struct PCommentBool__storage_ {
  uint32_t _has_storage_[1];
} PCommentBool__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isEnable",
        .dataTypeSpecific.className = NULL,
        .number = PCommentBool_FieldNumber_IsEnable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PCommentBool class]
                                     rootClass:[CommentRoot class]
                                          file:CommentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PCommentBool__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datapublishing.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Datapublishing.pbobjc.h"
 #import "News.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DatapublishingRoot

@implementation DatapublishingRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[NewsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DatapublishingRoot_FileDescriptor

static GPBFileDescriptor *DatapublishingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PWords

@implementation PWords

@dynamic wordArray, wordArray_Count;

typedef struct PWords__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *wordArray;
} PWords__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "wordArray",
        .dataTypeSpecific.className = NULL,
        .number = PWords_FieldNumber_WordArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PWords__storage_, wordArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PWords class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PWords__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PGuy

@implementation PGuy

@dynamic uuid;
@dynamic username;
@dynamic nickname;
@dynamic realname;
@dynamic whatsup;
@dynamic headImgURL;
@dynamic fansCount;
@dynamic followShip;
@dynamic friendShip;
@dynamic rankValue;

typedef struct PGuy__storage_ {
  uint32_t _has_storage_[1];
  int32_t fansCount;
  int32_t followShip;
  int32_t friendShip;
  int32_t rankValue;
  NSString *uuid;
  NSString *username;
  NSString *nickname;
  NSString *realname;
  NSString *whatsup;
  NSString *headImgURL;
} PGuy__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PGuy__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PGuy__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_Nickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PGuy__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realname",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_Realname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PGuy__storage_, realname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "whatsup",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_Whatsup,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PGuy__storage_, whatsup),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_HeadImgURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PGuy__storage_, headImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fansCount",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_FansCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PGuy__storage_, fansCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "followShip",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_FollowShip,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PGuy__storage_, followShip),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "friendShip",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_FriendShip,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PGuy__storage_, friendShip),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankValue",
        .dataTypeSpecific.className = NULL,
        .number = PGuy_FieldNumber_RankValue,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PGuy__storage_, rankValue),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PGuy class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PGuy__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\006\n\000\013\t\000\014\n\000\r\n\000\016\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PGuyList

@implementation PGuyList

@dynamic guyArray, guyArray_Count;

typedef struct PGuyList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *guyArray;
} PGuyList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "guyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PGuyList_FieldNumber_GuyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PGuyList__storage_, guyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PGuyList class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PGuyList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PTopicNews

@implementation PTopicNews

@dynamic topic;
@dynamic relArray, relArray_Count;
@dynamic views;
@dynamic count;
@dynamic articlesArray, articlesArray_Count;

typedef struct PTopicNews__storage_ {
  uint32_t _has_storage_[1];
  int32_t views;
  int32_t count;
  NSString *topic;
  NSMutableArray *relArray;
  NSMutableArray *articlesArray;
} PTopicNews__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = PTopicNews_FieldNumber_Topic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PTopicNews__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relArray",
        .dataTypeSpecific.className = NULL,
        .number = PTopicNews_FieldNumber_RelArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PTopicNews__storage_, relArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "views",
        .dataTypeSpecific.className = NULL,
        .number = PTopicNews_FieldNumber_Views,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PTopicNews__storage_, views),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PTopicNews_FieldNumber_Count,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PTopicNews__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "articlesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostInfo),
        .number = PTopicNews_FieldNumber_ArticlesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PTopicNews__storage_, articlesArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PTopicNews class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PTopicNews__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\000Articles\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PSearchResults

@implementation PSearchResults

@dynamic hasGuy, guy;

typedef struct PSearchResults__storage_ {
  uint32_t _has_storage_[1];
  PGuyList *guy;
} PSearchResults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "guy",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuyList),
        .number = PSearchResults_FieldNumber_Guy,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PSearchResults__storage_, guy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PSearchResults class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PSearchResults__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PPostData

@implementation PPostData

@dynamic posts;
@dynamic views;
@dynamic votes;
@dynamic comments;
@dynamic shares;

typedef struct PPostData__storage_ {
  uint32_t _has_storage_[1];
  int32_t posts;
  int32_t views;
  int32_t votes;
  int32_t comments;
  int32_t shares;
} PPostData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "posts",
        .dataTypeSpecific.className = NULL,
        .number = PPostData_FieldNumber_Posts,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PPostData__storage_, posts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "views",
        .dataTypeSpecific.className = NULL,
        .number = PPostData_FieldNumber_Views,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PPostData__storage_, views),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "votes",
        .dataTypeSpecific.className = NULL,
        .number = PPostData_FieldNumber_Votes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PPostData__storage_, votes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "comments",
        .dataTypeSpecific.className = NULL,
        .number = PPostData_FieldNumber_Comments,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PPostData__storage_, comments),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "shares",
        .dataTypeSpecific.className = NULL,
        .number = PPostData_FieldNumber_Shares,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PPostData__storage_, shares),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PPostData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PPostData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRegionData

@implementation PRegionData

@dynamic region;
@dynamic count;

typedef struct PRegionData__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSString *region;
} PRegionData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "region",
        .dataTypeSpecific.className = NULL,
        .number = PRegionData_FieldNumber_Region,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRegionData__storage_, region),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PRegionData_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRegionData__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRegionData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRegionData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAgeData

@implementation PAgeData

@dynamic section;
@dynamic count;

typedef struct PAgeData__storage_ {
  uint32_t _has_storage_[1];
  int32_t section;
  int32_t count;
} PAgeData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "section",
        .dataTypeSpecific.className = NULL,
        .number = PAgeData_FieldNumber_Section,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAgeData__storage_, section),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PAgeData_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAgeData__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAgeData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAgeData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PFollowData

@implementation PFollowData

@dynamic total;
@dynamic male;
@dynamic female;
@dynamic active;
@dynamic regionArray, regionArray_Count;
@dynamic ageArray, ageArray_Count;

typedef struct PFollowData__storage_ {
  uint32_t _has_storage_[1];
  int32_t total;
  int32_t male;
  int32_t female;
  int32_t active;
  NSMutableArray *regionArray;
  NSMutableArray *ageArray;
} PFollowData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = PFollowData_FieldNumber_Total,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PFollowData__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "male",
        .dataTypeSpecific.className = NULL,
        .number = PFollowData_FieldNumber_Male,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PFollowData__storage_, male),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "female",
        .dataTypeSpecific.className = NULL,
        .number = PFollowData_FieldNumber_Female,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PFollowData__storage_, female),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = PFollowData_FieldNumber_Active,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PFollowData__storage_, active),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "regionArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PRegionData),
        .number = PFollowData_FieldNumber_RegionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PFollowData__storage_, regionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PAgeData),
        .number = PFollowData_FieldNumber_AgeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PFollowData__storage_, ageArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PFollowData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PFollowData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PDayData

@implementation PDayData

@dynamic date;
@dynamic worth;
@dynamic hasFollow, follow;
@dynamic hasPost, post;

typedef struct PDayData__storage_ {
  uint32_t _has_storage_[1];
  int32_t worth;
  NSString *date;
  PFollowData *follow;
  PPostData *post;
} PDayData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = PDayData_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PDayData__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "worth",
        .dataTypeSpecific.className = NULL,
        .number = PDayData_FieldNumber_Worth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PDayData__storage_, worth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "follow",
        .dataTypeSpecific.className = GPBStringifySymbol(PFollowData),
        .number = PDayData_FieldNumber_Follow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PDayData__storage_, follow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "post",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostData),
        .number = PDayData_FieldNumber_Post,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PDayData__storage_, post),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PDayData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PDayData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PDaysData

@implementation PDaysData

@dynamic dataArray, dataArray_Count;

typedef struct PDaysData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *dataArray;
} PDaysData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PDayData),
        .number = PDaysData_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PDaysData__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PDaysData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PDaysData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNewestData

@implementation PNewestData

@dynamic date;
@dynamic follows;
@dynamic posts;

typedef struct PNewestData__storage_ {
  uint32_t _has_storage_[1];
  int32_t follows;
  int32_t posts;
  NSString *date;
} PNewestData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = PNewestData_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNewestData__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "follows",
        .dataTypeSpecific.className = NULL,
        .number = PNewestData_FieldNumber_Follows,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNewestData__storage_, follows),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "posts",
        .dataTypeSpecific.className = NULL,
        .number = PNewestData_FieldNumber_Posts,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNewestData__storage_, posts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNewestData class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNewestData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PGame

@implementation PGame

@dynamic hasInfo, info;
@dynamic clubArray, clubArray_Count;
@dynamic playerArray, playerArray_Count;
@dynamic famousArray, famousArray_Count;

typedef struct PGame__storage_ {
  uint32_t _has_storage_[1];
  PGuy *info;
  NSMutableArray *clubArray;
  NSMutableArray *playerArray;
  NSMutableArray *famousArray;
} PGame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PGame_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PGame__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clubArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PGame_FieldNumber_ClubArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PGame__storage_, clubArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playerArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PGame_FieldNumber_PlayerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PGame__storage_, playerArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "famousArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PGame_FieldNumber_FamousArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PGame__storage_, famousArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PGame class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PGame__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PGameList

@implementation PGameList

@dynamic type;
@dynamic gameArray, gameArray_Count;

typedef struct PGameList__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSMutableArray *gameArray;
} PGameList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PGameList_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PGameList__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGame),
        .number = PGameList_FieldNumber_GameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PGameList__storage_, gameArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PGameList class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PGameList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PRank

@implementation PRank

@dynamic rank;
@dynamic rankValue;
@dynamic guysArray, guysArray_Count;

typedef struct PRank__storage_ {
  uint32_t _has_storage_[1];
  int32_t rank;
  int32_t rankValue;
  NSMutableArray *guysArray;
} PRank__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rank",
        .dataTypeSpecific.className = NULL,
        .number = PRank_FieldNumber_Rank,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PRank__storage_, rank),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rankValue",
        .dataTypeSpecific.className = NULL,
        .number = PRank_FieldNumber_RankValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PRank__storage_, rankValue),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "guysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PGuy),
        .number = PRank_FieldNumber_GuysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PRank__storage_, guysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PRank class]
                                     rootClass:[DatapublishingRoot class]
                                          file:DatapublishingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PRank__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Notification.pbobjc.h"
 #import "News.pbobjc.h"
 #import "Comment.pbobjc.h"
 #import "Account.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NotificationRoot

@implementation NotificationRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[NewsRoot extensionRegistry]];
    [registry addExtensions:[CommentRoot extensionRegistry]];
    [registry addExtensions:[AccountRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - NotificationRoot_FileDescriptor

static GPBFileDescriptor *NotificationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SimpleUser

@implementation SimpleUser

@dynamic level;
@dynamic uuid;
@dynamic username;
@dynamic nickname;
@dynamic headImgURL;

typedef struct SimpleUser__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  NSString *uuid;
  NSString *username;
  NSString *nickname;
  NSString *headImgURL;
} SimpleUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = SimpleUser_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SimpleUser__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = SimpleUser_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SimpleUser__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = SimpleUser_FieldNumber_Username,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SimpleUser__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = SimpleUser_FieldNumber_Nickname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SimpleUser__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SimpleUser_FieldNumber_HeadImgURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SimpleUser__storage_, headImgURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SimpleUser class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SimpleUser__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyComment

@implementation NotifyComment

@dynamic messageId;
@dynamic hasCommentUser, commentUser;
@dynamic hasComment, comment;
@dynamic hasArticle, article;
@dynamic time;
@dynamic status;

typedef struct NotifyComment__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  SimpleUser *commentUser;
  PComment *comment;
  PPostInfo *article;
  int64_t messageId;
  int64_t time;
} NotifyComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyComment_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyComment_FieldNumber_CommentUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, commentUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = GPBStringifySymbol(PComment),
        .number = NotifyComment_FieldNumber_Comment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "article",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostInfo),
        .number = NotifyComment_FieldNumber_Article,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, article),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyComment_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyComment_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotifyComment__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyComment class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyComment__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyCommentList

@implementation NotifyCommentList

@dynamic listArray, listArray_Count;

typedef struct NotifyCommentList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyCommentList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyComment),
        .number = NotifyCommentList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyCommentList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyCommentList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyCommentList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyCommentReply

@implementation NotifyCommentReply

@dynamic messageId;
@dynamic hasCommentUser, commentUser;
@dynamic hasComment, comment;
@dynamic hasReply, reply;
@dynamic time;
@dynamic status;
@dynamic hasReplyUser, replyUser;

typedef struct NotifyCommentReply__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  SimpleUser *commentUser;
  PComment *comment;
  PComment *reply;
  SimpleUser *replyUser;
  int64_t messageId;
  int64_t time;
} NotifyCommentReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentReply_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyCommentReply_FieldNumber_CommentUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, commentUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = GPBStringifySymbol(PComment),
        .number = NotifyCommentReply_FieldNumber_Comment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reply",
        .dataTypeSpecific.className = GPBStringifySymbol(PComment),
        .number = NotifyCommentReply_FieldNumber_Reply,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, reply),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentReply_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentReply_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "replyUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyCommentReply_FieldNumber_ReplyUser,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NotifyCommentReply__storage_, replyUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyCommentReply class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyCommentReply__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\013\000\007\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyCommentReplyList

@implementation NotifyCommentReplyList

@dynamic listArray, listArray_Count;

typedef struct NotifyCommentReplyList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyCommentReplyList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyCommentReply),
        .number = NotifyCommentReplyList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyCommentReplyList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyCommentReplyList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyCommentReplyList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyCommentVote

@implementation NotifyCommentVote

@dynamic messageId;
@dynamic hasVoteUser, voteUser;
@dynamic hasComment, comment;
@dynamic hasArticle, article;
@dynamic time;
@dynamic voteType;
@dynamic status;

typedef struct NotifyCommentVote__storage_ {
  uint32_t _has_storage_[1];
  int32_t voteType;
  int32_t status;
  SimpleUser *voteUser;
  PComment *comment;
  PPostInfo *article;
  int64_t messageId;
  int64_t time;
} NotifyCommentVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentVote_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voteUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyCommentVote_FieldNumber_VoteUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, voteUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = GPBStringifySymbol(PComment),
        .number = NotifyCommentVote_FieldNumber_Comment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "article",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostInfo),
        .number = NotifyCommentVote_FieldNumber_Article,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, article),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentVote_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voteType",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentVote_FieldNumber_VoteType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, voteType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyCommentVote_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NotifyCommentVote__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyCommentVote class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyCommentVote__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\010\000\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyCommentVoteList

@implementation NotifyCommentVoteList

@dynamic listArray, listArray_Count;

typedef struct NotifyCommentVoteList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyCommentVoteList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyCommentVote),
        .number = NotifyCommentVoteList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyCommentVoteList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyCommentVoteList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyCommentVoteList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifySocial

@implementation NotifySocial

@dynamic messageId;
@dynamic hasSocialUser, socialUser;
@dynamic time;
@dynamic socialType;
@dynamic status;
@dynamic socialRelation;
@dynamic notifyUuid;

typedef struct NotifySocial__storage_ {
  uint32_t _has_storage_[1];
  int32_t socialType;
  int32_t status;
  int32_t socialRelation;
  SimpleUser *socialUser;
  NSString *notifyUuid;
  int64_t messageId;
  int64_t time;
} NotifySocial__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "socialUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifySocial_FieldNumber_SocialUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, socialUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "socialType",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_SocialType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, socialType),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "socialRelation",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_SocialRelation,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, socialRelation),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "notifyUuid",
        .dataTypeSpecific.className = NULL,
        .number = NotifySocial_FieldNumber_NotifyUuid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NotifySocial__storage_, notifyUuid),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifySocial class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifySocial__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\n\000\004\n\000\006\016\000\007\007c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifySocialList

@implementation NotifySocialList

@dynamic listArray, listArray_Count;

typedef struct NotifySocialList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifySocialList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifySocial),
        .number = NotifySocialList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifySocialList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifySocialList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifySocialList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyFollow

@implementation NotifyFollow

@dynamic messageId;
@dynamic hasFollowUser, followUser;
@dynamic time;
@dynamic followship;
@dynamic status;

typedef struct NotifyFollow__storage_ {
  uint32_t _has_storage_[1];
  int32_t followship;
  int32_t status;
  SimpleUser *followUser;
  int64_t messageId;
  int64_t time;
} NotifyFollow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyFollow_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyFollow__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "followUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyFollow_FieldNumber_FollowUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyFollow__storage_, followUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyFollow_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyFollow__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "followship",
        .dataTypeSpecific.className = NULL,
        .number = NotifyFollow_FieldNumber_Followship,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyFollow__storage_, followship),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyFollow_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifyFollow__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyFollow class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyFollow__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyFollowList

@implementation NotifyFollowList

@dynamic listArray, listArray_Count;

typedef struct NotifyFollowList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyFollowList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyFollow),
        .number = NotifyFollowList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyFollowList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyFollowList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyFollowList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyNewsVote

@implementation NotifyNewsVote

@dynamic messageId;
@dynamic hasVoteUser, voteUser;
@dynamic hasArticle, article;
@dynamic time;
@dynamic status;

typedef struct NotifyNewsVote__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  SimpleUser *voteUser;
  PPostInfo *article;
  int64_t messageId;
  int64_t time;
} NotifyNewsVote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsVote_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyNewsVote__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voteUser",
        .dataTypeSpecific.className = GPBStringifySymbol(SimpleUser),
        .number = NotifyNewsVote_FieldNumber_VoteUser,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyNewsVote__storage_, voteUser),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "article",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostInfo),
        .number = NotifyNewsVote_FieldNumber_Article,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyNewsVote__storage_, article),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsVote_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyNewsVote__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsVote_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NotifyNewsVote__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyNewsVote class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyNewsVote__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyNewsVoteList

@implementation NotifyNewsVoteList

@dynamic listArray, listArray_Count;

typedef struct NotifyNewsVoteList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyNewsVoteList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyNewsVote),
        .number = NotifyNewsVoteList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyNewsVoteList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyNewsVoteList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyNewsVoteList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyNewsAt

@implementation NotifyNewsAt

@dynamic messageId;
@dynamic hasArticle, article;
@dynamic time;
@dynamic status;

typedef struct NotifyNewsAt__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  PPostInfo *article;
  int64_t messageId;
  int64_t time;
} NotifyNewsAt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsAt_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NotifyNewsAt__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "article",
        .dataTypeSpecific.className = GPBStringifySymbol(PPostInfo),
        .number = NotifyNewsAt_FieldNumber_Article,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NotifyNewsAt__storage_, article),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsAt_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NotifyNewsAt__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = NotifyNewsAt_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NotifyNewsAt__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyNewsAt class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyNewsAt__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NotifyNewsAtList

@implementation NotifyNewsAtList

@dynamic listArray, listArray_Count;

typedef struct NotifyNewsAtList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} NotifyNewsAtList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NotifyNewsAt),
        .number = NotifyNewsAtList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NotifyNewsAtList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NotifyNewsAtList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NotifyNewsAtList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNotifyCommunityInvite

@implementation PNotifyCommunityInvite

@dynamic messageId;
@dynamic time;
@dynamic status;
@dynamic communityId;
@dynamic communityName;
@dynamic hasUser, user;

typedef struct PNotifyCommunityInvite__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *communityName;
  PUserBase *user;
  int64_t messageId;
  int64_t time;
  int64_t communityId;
} PNotifyCommunityInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PNotifyCommunityInvite_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = PNotifyCommunityInvite_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = PNotifyCommunityInvite_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "communityId",
        .dataTypeSpecific.className = NULL,
        .number = PNotifyCommunityInvite_FieldNumber_CommunityId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, communityId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "communityName",
        .dataTypeSpecific.className = NULL,
        .number = PNotifyCommunityInvite_FieldNumber_CommunityName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, communityName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(PUserBase),
        .number = PNotifyCommunityInvite_FieldNumber_User,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PNotifyCommunityInvite__storage_, user),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNotifyCommunityInvite class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNotifyCommunityInvite__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\004\013\000\005\r\000\006D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNotifyCommunityInviteList

@implementation PNotifyCommunityInviteList

@dynamic listArray, listArray_Count;

typedef struct PNotifyCommunityInviteList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PNotifyCommunityInviteList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PNotifyCommunityInvite),
        .number = PNotifyCommunityInviteList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PNotifyCommunityInviteList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNotifyCommunityInviteList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNotifyCommunityInviteList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMsgCount

@implementation PMsgCount

@dynamic type;
@dynamic count;

typedef struct PMsgCount__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  int64_t count;
} PMsgCount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = PMsgCount_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PMsgCount__storage_, type),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = PMsgCount_FieldNumber_Count,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PMsgCount__storage_, count),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMsgCount class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMsgCount__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002D\000\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMsgCountList

@implementation PMsgCountList

@dynamic msgCountArray, msgCountArray_Count;

typedef struct PMsgCountList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgCountArray;
} PMsgCountList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgCountArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PMsgCount),
        .number = PMsgCountList_FieldNumber_MsgCountArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PMsgCountList__storage_, msgCountArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMsgCountList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMsgCountList__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000MsgCount\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PMsgIDList

@implementation PMsgIDList

@dynamic msgIdArray, msgIdArray_Count;

typedef struct PMsgIDList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgIdArray;
} PMsgIDList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgIdArray",
        .dataTypeSpecific.className = NULL,
        .number = PMsgIDList_FieldNumber_MsgIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PMsgIDList__storage_, msgIdArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PMsgIDList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PMsgIDList__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000MsgID\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PNotifySetting

@implementation PNotifySetting

@dynamic mute;

typedef struct PNotifySetting__storage_ {
  uint32_t _has_storage_[1];
} PNotifySetting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mute",
        .dataTypeSpecific.className = NULL,
        .number = PNotifySetting_FieldNumber_Mute,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PNotifySetting class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PNotifySetting__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PStreamingMsg

@implementation PStreamingMsg

@dynamic uuid;
@dynamic messageId;
@dynamic serial;
@dynamic over;
@dynamic website;
@dynamic URL;
@dynamic title;
@dynamic startTime;

typedef struct PStreamingMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *website;
  NSString *URL;
  NSString *title;
  int64_t messageId;
  int64_t serial;
  int64_t startTime;
} PStreamingMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, messageId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serial",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_Serial,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, serial),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "over",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_Over,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "website",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_Website,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, website),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_URL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_Title,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = PStreamingMsg_FieldNumber_StartTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PStreamingMsg__storage_, startTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PStreamingMsg class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PStreamingMsg__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\t\000\006!!!\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PStreamingMsgList

@implementation PStreamingMsgList

@dynamic listArray, listArray_Count;

typedef struct PStreamingMsgList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *listArray;
} PStreamingMsgList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "listArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PStreamingMsg),
        .number = PStreamingMsgList_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PStreamingMsgList__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PStreamingMsgList class]
                                     rootClass:[NotificationRoot class]
                                          file:NotificationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PStreamingMsgList__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

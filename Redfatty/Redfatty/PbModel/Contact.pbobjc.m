// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Contact.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContactRoot

@implementation ContactRoot

@end

#pragma mark - ContactRoot_FileDescriptor

static GPBFileDescriptor *ContactRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PContactLinkInfo

@implementation PContactLinkInfo

@dynamic uuid;
@dynamic mobile;
@dynamic nickName;
@dynamic hasLink;

typedef struct PContactLinkInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *mobile;
  NSString *nickName;
  NSString *hasLink;
} PContactLinkInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PContactLinkInfo_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PContactLinkInfo__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = PContactLinkInfo_FieldNumber_Mobile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PContactLinkInfo__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = PContactLinkInfo_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PContactLinkInfo__storage_, nickName),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasLink",
        .dataTypeSpecific.className = NULL,
        .number = PContactLinkInfo_FieldNumber_HasLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PContactLinkInfo__storage_, hasLink),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PContactLinkInfo class]
                                     rootClass:[ContactRoot class]
                                          file:ContactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PContactLinkInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\010\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PContactLinkInfoList

@implementation PContactLinkInfoList

@dynamic contactUsersArray, contactUsersArray_Count;
@dynamic totalCount;

typedef struct PContactLinkInfoList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contactUsersArray;
  NSString *totalCount;
} PContactLinkInfoList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PContactLinkInfo),
        .number = PContactLinkInfoList_FieldNumber_ContactUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PContactLinkInfoList__storage_, contactUsersArray),
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalCount",
        .dataTypeSpecific.className = NULL,
        .number = PContactLinkInfoList_FieldNumber_TotalCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PContactLinkInfoList__storage_, totalCount),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PContactLinkInfoList class]
                                     rootClass:[ContactRoot class]
                                          file:ContactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PContactLinkInfoList__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000ContactUsers\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PLastModifyInfo

@implementation PLastModifyInfo

@dynamic devSerial;
@dynamic modifyTime;

typedef struct PLastModifyInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *devSerial;
  NSString *modifyTime;
} PLastModifyInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "devSerial",
        .dataTypeSpecific.className = NULL,
        .number = PLastModifyInfo_FieldNumber_DevSerial,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PLastModifyInfo__storage_, devSerial),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifyTime",
        .dataTypeSpecific.className = NULL,
        .number = PLastModifyInfo_FieldNumber_ModifyTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PLastModifyInfo__storage_, modifyTime),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PLastModifyInfo class]
                                     rootClass:[ContactRoot class]
                                          file:ContactRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PLastModifyInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
